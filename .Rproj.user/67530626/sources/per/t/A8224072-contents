#install.packages("shiny")
library(shiny)
library(shinydashboard)
library(readxl)
library(dplyr)
library(ggplot2)
library(plotly)


data <- read_excel('dataset_MyFoodData.xlsx')

goal_data <- read.csv('goal_data.csv')
# Convert Date column to Date type with matching format
goal_data$Date <- as.Date(goal_data$Date, format = "%d-%m-%Y")

intake_data <- read.csv('intake_data.csv')
# Convert Date column to Date type with matching format
intake_data$Date <- as.Date(intake_data$Date, format = "%d-%m-%Y")



# UI function for setting goals
goal_ui <- function() {
  fluidRow(
    column(6,
           numericInput("goal_calories", "Goal Calories", value = 2000),
           numericInput("goal_fats", "Goal Fats (g)", value = 70),
           numericInput("goal_protein", "Goal Protein (g)", value = 50),
           numericInput("goal_sugar", "Goal Sugar (g)", value = 30),
           actionButton("set_goals", "Set Goals")
    )
  )
}


# UI function for adding food
add_food_ui <- function() {
  fluidRow(
    column(6,
           selectizeInput("food_name", "Food Item", choices = NULL),
           actionButton("add_food", "Add Food")
    )
  )
}


daily_intake_tracker <- function(){
  
  total_intake_today <- intake_data %>% filter(Date == Sys.Date())%>%
    mutate_at(vars(-Date, -ID, -Name), ~ifelse(. == "NULL", NA, as.numeric(.))) %>%
    summarise(
      Total_Calories = sum(Calories, na.rm = TRUE),
      Total_Fats = sum(Fats, na.rm = TRUE),
      Total_Protein = sum(Protein, na.rm = TRUE),
      Total_Sugar = sum(Sugar, na.rm = TRUE))
  
  
  # Create a string stating the summed up values for each column
  return(list(Total_Calories = total_intake_today$Total_Calories,
              Total_Fats = total_intake_today$Total_Fats,
              Total_Protein = total_intake_today$Total_Protein,
              Total_Sugar =  total_intake_today$Total_Sugar))
  
}



# UI function for daily tracking
daily_tracking_ui <- function() {
  fluidRow(
    column(12,
           h3("Today's Intake")
    ),
    fluidRow(
      column(12,
             uiOutput("calories_progress"),
             br(),
             uiOutput("fats_progress"),
             br(),
             uiOutput("protein_progress"),
             br(),
             uiOutput("sugar_progress")
      )
    )
  )
}


# UI function for weekly trends
weekly_trends_ui <- function() {
  fluidRow(
    column(6,
           h3("Weekly Trends"),
           plotOutput("weekly_trends_plot")
    )
  )
}


# Define the UI for the app
ui <- fluidPage(
  titlePanel("Personalized Food Tracker App"),
  
  tabsetPanel(
    tabPanel("Set Goals", goal_ui()),
    tabPanel("Add Food", add_food_ui()),
    tabPanel("Daily Tracking", daily_tracking_ui()),
    tabPanel("Weekly Trends", weekly_trends_ui())
  )
)



# Define the server logic for the app
server <- function(input, output, session){
  
  # Define reactive values to store user data
  user_data <- reactiveValues(
    goals = NULL,
    daily_intake = NULL
  )
  
  # Update user goals ----------------------------------------------------------
  observeEvent(input$set_goals, {
    
    user_data$goals <- data.frame(
      Date = Sys.Date(),
      Calories_Goal = input$goal_calories,
      Fats_Goal = input$goal_fats,
      Protein_Goal = input$goal_protein,
      Sugar_Goal = input$goal_sugar
    )
    
    
    # Export a data frame to a text file using write.table()
    write.table(user_data$goals,
                file = "goal_data.csv",
                sep = ",",
                append = TRUE,
                row.names = FALSE, 
                col.names = FALSE
    )
    
  })
  
  
  updateSelectizeInput(session, 'food_name', 'Food Item', 
                       choices = data$name, server = TRUE)
  
  
  # Add food to daily intake ---------------------------------------------------
  observeEvent(input$add_food, {
    
    # selected food item name
    food_item <- isolate(input$food_name)
    
    # filter the row for the food item
    selected_food <- data %>% filter(name == food_item)
    
    
    if (nrow(selected_food) > 0) {
      
      # fetch the relevant row
      food_nutrition <- selected_food[, c("ID", "Calories", "Fat (g)", "Protein (g)", "Sugars (g)")]
      
      user_data$daily_intake <- data.frame(
        Date = Sys.Date(),
        ID = food_nutrition$ID,
        Food = food_item,
        Calories = food_nutrition$Calories,
        Fats = food_nutrition$`Fat (g)`,
        Protein = food_nutrition$`Protein (g)`,
        Sugar = food_nutrition$`Sugars (g)`
      )
      
      # Export a data frame to a text file using write.table()
      write.table(user_data$daily_intake,
                  file = "intake_data.csv",
                  sep = ",",
                  append = TRUE,
                  row.names = FALSE, 
                  col.names = FALSE
      )
      
      print('added intake')
      
    } else {
      # Handle case where food item is not found in the dataset
      showModal(modalDialog(
        title = "Error",
        "Food item not found in database. Please enter a valid food item."
      ))
    }
  })
  
  
  # Render daily intake progress bars
  output$calories_progress <- renderUI({
    daily_totals <- daily_intake_tracker()
    goal <- user_data$goals %>% filter(Date == Sys.Date()) %>% pull(Calories_Goal)
    progress <- daily_totals$Total_Calories
    progressBar(value = progress, total = goal, display_pct = TRUE)
  })
  
  output$fats_progress <- renderUI({
    daily_totals <- daily_intake_tracker()
    goal <- user_data$goals %>% filter(Date == Sys.Date()) %>% pull(Fats_Goal)
    progress <- daily_totals$Total_Fats
    progressBar(value = progress, total = goal, display_pct = TRUE)
  })
  
  output$protein_progress <- renderUI({
    daily_totals <- daily_intake_tracker()
    goal <- user_data$goals %>% filter(Date == Sys.Date()) %>% pull(Protein_Goal)
    progress <- daily_totals$Total_Protein
    progressBar(value = progress, total = goal, display_pct = TRUE)
  })
  
  output$sugar_progress <- renderUI({
    daily_totals <- daily_intake_tracker()
    goal <- user_data$goals %>% filter(Date == Sys.Date()) %>% pull(Sugar_Goal)
    progress <- daily_totals$Total_Sugar
    progressBar(value = progress, total = goal, display_pct = TRUE)
  })
  
  
  # Render weekly trends plot
  output$weekly_trends_plot <- renderPlot({
    # Generate dummy data for weekly trends plot
    # Replace this with actual data analysis
    dates <- intake_data$Date
    calories <- intake_data$Calories
    fats <- intake_data$Fats
    protein <- intake_data$Protein
    sugar <- intake_data$Sugar
    
    weekly_data <- data.frame(Date = dates,
                              Calories = calories,
                              Fats = fats,
                              Protein = protein,
                              Sugar = sugar)
    
    ggplot(weekly_data, aes(x = Date)) +
      geom_line(aes(y = Calories, color = "Calories"), size = 1) +
      geom_line(aes(y = Fats, color = "Fats"), size = 1) +
      geom_line(aes(y = Protein, color = "Protein"), size = 1) +
      geom_line(aes(y = Sugar, color = "Sugar"), size = 1) +
      labs(title = "Weekly Nutrient Trends",
           x = "Date",
           y = "Amount",
           color = "Nutrient") +
      theme_minimal()
  })
}



# Run the application
shinyApp(ui = ui, server = server)





