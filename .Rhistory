# Load the data from the Excel file
data_path <- "D:\\MSc Business Analytics\\Sem 2\\Advanced Data Visualisation\\1 Exercise One\\DataSet\\5.xlsx"
data <- read_excel(data_path)
# Prepare data
data <- data %>%
filter(Indicator %in% c("MEN", "WOMEN")) %>%
pivot_longer(cols = `Under 25 years`:`over 55 years`, names_to = "AgeGroup", values_to = "Count") %>%
mutate(Gender = if_else(Indicator == "MEN", "Men", "Women"),
Count = if_else(Gender == "Women", -Count, Count),
Year = factor(Year)) %>%
filter(Year == "2023")  # Filter for the year 2023
# Plotting
plot <- ggplot(data, aes(x = AgeGroup, y = Count, group = Gender, color = Gender)) +
geom_segment(aes(xend = AgeGroup, yend = 0), size = 2.5) +  # Increased line size
scale_color_manual(values = c("Men" = "blue", "Women" = "red")) +
labs(title = "Unemployment Rates by Age Group and Gender for 2023",
subtitle = "Comparative unemployment rates for Men (Blue) and Women (Red)",
x = "Age Group",
y = "Number of Unemployed",
color = "Gender") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 4, face = "bold"),  # Customize x-axis text size
axis.title.x = element_text(size = 6, face = "bold"),  # X-axis title size
axis.title.y = element_text(size = 6, face = "bold"),  # Y-axis title size
plot.title = element_text(size = 6, face = "bold"),  # Plot title size
plot.subtitle = element_text(size = 5, face = "bold"),  # Plot subtitle size
legend.position = "bottom") +  # Move legend to bottom
scale_y_continuous(labels = function(x) format(x, big.mark = ".", decimal.mark = ",", scientific = FALSE))  # Customize y-axis labels
# Print the plot
print(plot)
# Load required libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
# Load the data from the Excel file
data_path <- "D:\\MSc Business Analytics\\Sem 2\\Advanced Data Visualisation\\1 Exercise One\\DataSet\\5.xlsx"
data <- read_excel(data_path)
# Prepare data: Assuming the dataset has separate entries for 'Men' and 'Women' in rows and columns for age groups
data <- data %>%
filter(Indicator %in% c("MEN", "WOMEN")) %>%
pivot_longer(cols = `Under 25 years`:`over 55 years`, names_to = "AgeGroup", values_to = "Count") %>%
mutate(Gender = if_else(Indicator == "MEN", "Male", "Female"),
Year = factor(Year)) %>%
group_by(Year, AgeGroup, Gender) %>%
summarize(Total = sum(Count), .groups = 'drop') %>%
group_by(AgeGroup, Gender) %>%
summarize(Average = mean(Total), .groups = 'drop')
# Plotting
plot <- ggplot(data, aes(x = AgeGroup, y = Average, color = Gender, group = Gender)) +
geom_line(aes(size = Gender)) +  # Varying line size based on Gender
geom_point(size = 3) +  # Add points to each data intersection
scale_size_manual(values = c("Male" = 1.5, "Female" = 1)) +
scale_color_manual(values = c("Male" = "green", "Female" = "teal")) +
labs(title = "Gender-specific Unemployment by Age Group (2015-2023)",
subtitle = "Line Thickness Variation",
x = "Age Group",
y = "Average Number of Unemployed Individuals",
color = "Gender") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 16),
legend.title = element_text(size = 14))
# Print the plot
print(plot)
rlang::last_trace()
# Load required libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
# Load the data from the Excel file
data_path <- "D:\\MSc Business Analytics\\Sem 2\\Advanced Data Visualisation\\1 Exercise One\\DataSet\\5.xlsx"
data <- read_excel(data_path)
# Prepare data: Assuming the dataset has separate entries for 'Men' and 'Women' in rows and columns for age groups
data <- data %>%
filter(Indicator %in% c("MEN", "WOMEN")) %>%
pivot_longer(cols = `Under 25 years`:`over 55 years`, names_to = "AgeGroup", values_to = "Count") %>%
mutate(Gender = if_else(Indicator == "MEN", "Male", "Female"),
Year = factor(Year)) %>%
group_by(Year, AgeGroup, Gender) %>%
summarize(Total = sum(Count), .groups = 'drop') %>%
group_by(AgeGroup, Gender) %>%
summarize(Average = mean(Total), .groups = 'drop')
# Plotting
plot <- ggplot(data, aes(x = AgeGroup, y = Average, color = Gender, group = Gender)) +
geom_line(aes(size = Gender)) +  # Varying line size based on Gender
geom_point(size = 3) +  # Add points to each data intersection
scale_size_manual(values = c("Male" = 1.5, "Female" = 1)) +
scale_color_manual(values = c("Male" = "#006400", "Female" = "#008080")) +  # Dark green for Male, Teal (hex code) for Female
labs(title = "Gender-specific Unemployment by Age Group (2015-2023)",
subtitle = "Line Thickness Variation",
x = "Age Group",
y = "Average Number of Unemployed Individuals",
color = "Gender") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 16),
legend.title = element_text(size = 14))
# Print the plot
print(plot)
# Load required libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
# Load the data from the Excel file
data_path <- "D:\\MSc Business Analytics\\Sem 2\\Advanced Data Visualisation\\1 Exercise One\\DataSet\\5.xlsx"
data <- read_excel(data_path)
# Prepare data: Assuming the dataset has separate entries for 'Men' and 'Women' in rows and columns for age groups
data <- data %>%
filter(Indicator %in% c("MEN", "WOMEN")) %>%
pivot_longer(cols = `Under 25 years`:`over 55 years`, names_to = "AgeGroup", values_to = "Count") %>%
mutate(Gender = if_else(Indicator == "MEN", "Male", "Female"),
Year = factor(Year)) %>%
group_by(Year, AgeGroup, Gender) %>%
summarize(Total = sum(Count), .groups = 'drop') %>%
group_by(AgeGroup, Gender) %>%
summarize(Average = mean(Total), .groups = 'drop')
# Plotting
plot <- ggplot(data, aes(x = AgeGroup, y = Average, color = Gender, group = Gender)) +
geom_line(aes(size = Gender)) +  # Varying line size based on Gender
geom_point(size = 3) +  # Add points to each data intersection
scale_size_manual(values = c("Male" = 1.5, "Female" = 1)) +
scale_color_manual(values = c("Male" = "#006d2c", "Female" = "#2ca25f")) +  # Dark green for Male, Teal (hex code) for Female
labs(title = "Gender-specific Unemployment by Age Group (2015-2023)",
subtitle = "Line Thickness Variation",
x = "Age Group",
y = "Average Number of Unemployed Individuals",
color = "Gender") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 16),
legend.title = element_text(size = 14))
# Print the plot
print(plot)
# Save the plot if needed
ggsave("gender_specific_unemployment_by_age_group.png", plot = plot, width = 12, height = 8)
# Save the plot if needed
ggsave("D:/MSc Business Analytics/Sem 2/Advanced Data Visualisation/1 Exercise One/BarCharts/19Good.png", plot = plot, width = 12/2.5, height = 8/2.5, dpi = 300)
# Load required libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
# Load the data from the Excel file
data_path <- "D:\\MSc Business Analytics\\Sem 2\\Advanced Data Visualisation\\1 Exercise One\\DataSet\\5.xlsx"
data <- read_excel(data_path)
# Prepare data: Assuming the dataset has separate entries for 'Men' and 'Women' in rows and columns for age groups
data <- data %>%
filter(Indicator %in% c("MEN", "WOMEN")) %>%
pivot_longer(cols = `Under 25 years`:`over 55 years`, names_to = "AgeGroup", values_to = "Count") %>%
mutate(Gender = if_else(Indicator == "MEN", "Male", "Female"),
Year = factor(Year)) %>%
group_by(Year, AgeGroup, Gender) %>%
summarize(Total = sum(Count), .groups = 'drop') %>%
group_by(AgeGroup, Gender) %>%
summarize(Average = mean(Total), .groups = 'drop')
# Plotting
plot <- ggplot(data, aes(x = AgeGroup, y = Average, color = Gender, group = Gender)) +
geom_line(aes(size = Gender)) +  # Varying line size based on Gender
geom_point(size = 3) +  # Add points to each data intersection
scale_size_manual(values = c("Male" = 2, "Female" = 1)) +
scale_color_manual(values = c("Male" = "#006d2c", "Female" = "#2ca25f")) +  # Dark green for Male, Teal (hex code) for Female
labs(title = "Gender-specific Unemployment by Age Group (2015-2023)",
subtitle = "Line Thickness Variation",
x = "Age Group",
y = "Average Number of Unemployed Individuals",
color = "Gender") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 16),
legend.title = element_text(size = 14))
# Print the plot
print(plot)
# Load required libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
# Load the data from the Excel file
data_path <- "D:\\MSc Business Analytics\\Sem 2\\Advanced Data Visualisation\\1 Exercise One\\DataSet\\5.xlsx"
data <- read_excel(data_path)
# Prepare data: Assuming the dataset has separate entries for 'Men' and 'Women' in rows and columns for age groups
data <- data %>%
filter(Indicator %in% c("MEN", "WOMEN")) %>%
pivot_longer(cols = `Under 25 years`:`over 55 years`, names_to = "AgeGroup", values_to = "Count") %>%
mutate(Gender = if_else(Indicator == "MEN", "Male", "Female"),
Year = factor(Year)) %>%
group_by(Year, AgeGroup, Gender) %>%
summarize(Total = sum(Count), .groups = 'drop') %>%
group_by(AgeGroup, Gender) %>%
summarize(Average = mean(Total), .groups = 'drop')
# Plotting
plot <- ggplot(data, aes(x = AgeGroup, y = Average, color = Gender, group = Gender)) +
geom_line(aes(size = Gender), size = 1.5) +  # Ensure that line size is specified in case 'size = Gender' affects it
scale_size_manual(values = c("Male" = 1.5, "Female" = 1)) +
scale_color_manual(values = c("Male" = "#006400", "Female" = "#008080")) +  # Dark green for Male, Teal (hex code) for Female
labs(title = "Gender-specific Unemployment by Age Group (2015-2023)",
subtitle = "Line Thickness Variation",
x = "Age Group",
y = "Average Number of Unemployed Individuals",
color = "Gender") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 16),
legend.title = element_text(size = 14))
# Print the plot
print(plot)
# Save the plot if needed
ggsave("D:/MSc Business Analytics/Sem 2/Advanced Data Visualisation/1 Exercise One/BarCharts/19Good.png", plot = plot, width = 12/2.5, height = 8/2.5, dpi = 300)
# Load required libraries
library(tidyverse)
library(tm)
library(wordcloud)
library(SnowballC)
library(tidytext)
# install.packages("textstem")
library(textstem)
library(dplyr)
#################################################################
# Read the CSV file into a data frame
df <- read.csv("smartphone_tweets_2015-01-01_2015-01-13.csv")
#################################################################
# Read the CSV file into a data frame
df <- read.csv("smartphone_tweets_2015-01-01_2015-01-13.csv")
# Read the CSV file into a data frame
df <- read.csv("D:\MSc Business Analytics\Sem 2\Advanced Data Visualisation\3 Exercise Three\Solution-20240422T100513Z-001\Solution\solution\solution\smartphone_tweets_2015-01-01_2015-01-13.csv")
df <- read.csv("D:/MSc Business Analytics/Sem 2/Advanced Data Visualisation/3 Exercise Three/Solution-20240422T100513Z-001/Solution/solution/solution/smartphone_tweets_2015-01-01_2015-01-13.csv")
# Examine the structure of the dataset
str(df)
# View the first few rows of the data frame
head(df)
# Print the shape
print(dim(df))
################################################################
# Remove duplicate rows
df <- distinct(df)
# Print the shape
print(dim(df))
# Clean the dataset by selecting relevant columns
clean_df <- df %>%
select(date, tweet, replies_count) %>% # Select relevant columns
mutate(tweet = str_replace_all(tweet, "http\\S+", "")) %>% # Remove URLs
mutate(tweet = gsub("[^a-zA-Z\\s]", " ", tweet)) %>% # Remove non-alphabetic characters (including punctuations) excluding whitespace
mutate(tweet = tolower(tweet)) %>% # Convert tweet text to lowercase
mutate(tweet = removeWords(tweet, stopwords("en"))) %>% # Remove stopwords
mutate(tweet = gsub("\\b[a-z]{1}\\b", "", tweet)) %>% # Remove single characters
mutate(tweet = gsub("\\b\\w{2}\\b", "", tweet)) %>% # Remove two-letter words
mutate(tweet = gsub("\\s+", " ", tweet)) %>% # Remove additional whitespace
mutate(tweet = lemmatize_words(tweet)) %>% # Lemmatize words
mutate(tweet = gsub("\\bsmartphone\\b", "", tweet)) %>%
mutate(tweet = gsub("\\bsmartphones\\b", "", tweet))
# Remove additional whitespace
clean_df <- clean_df %>%
mutate(tweet = gsub("\\s+", " ", tweet))
# Print the shape
print(dim(clean_df))
# Print the shape
print(dim(clean_df))
# Remove null values
clean_df <- clean_df[complete.cases(clean_df), ]
# Remove duplicate rows
clean_df <- distinct(clean_df)
# Print the shape
print(dim(clean_df))
head(clean_df)
# Convert 'date' to Date format
clean_df$date <- as.Date(clean_df$date)
# Tweets by Date
tweets_by_date <- clean_df %>%
group_by(date) %>%
summarise(count = n())
ggplot(tweets_by_date, aes(x = date, y = count)) +
geom_line() +
labs(title = "Tweets Over Time", x = "Date", y = "Count") +
theme_minimal()
# Initially, there were fewer tweets, but they increased significantly
# after the fourth of January.
# Calculate word frequency
word_freq <- clean_df %>%
unnest_tokens(word, tweet) %>%
count(word, sort = TRUE)
# Plot top N most frequent words
top_n_words <- 20
ggplot(head(word_freq, top_n_words), aes(x = reorder(word, n), y = n)) +
geom_bar(stat = "identity", fill = rainbow(top_n_words), color = "black") +  # Use rainbow color palette
labs(x = "Word", y = "Frequency",
title = paste("Top", top_n_words, "Most Frequent Words")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# The word "twitter" has the highest frequency followed by "com", "pic", and "android".
################################################################################
################################################################################
# Calculate tweet lengths
clean_df$length <- nchar(clean_df$tweet)
# Plot distribution of tweet lengths
ggplot(clean_df, aes(x = length)) +
geom_histogram(fill = "lightblue", color = "black", bins = 30) +
labs(x = "Tweet Length", y = "Frequency",
title = "Distribution of Tweet Lengths") +
theme_minimal()
# Most of the tweets have lengths between 50 and 70 words.
############################################################
################################################################################
# Plot distribution of replies count with adjusted bin width
ggplot(clean_df, aes(x = replies_count)) +
geom_histogram(fill = "lightcoral", color = "black", bins = 50)
labs(x = "Replies Count", y = "Frequency",
title = "Distribution of Replies Count") +
theme_minimal()
# The number of replies is very low overall.
# There are some outliers in the replies count.
################################################################################
################################################################################
# Scatterplot between Replies and Tweet Length
# This plot may take a few seconds to display.
ggplot(clean_df, aes(x = length, y = replies_count)) +
geom_point(color = "blue") +
labs(title = "Replies vs. Tweet Length", x = "Length", y = "Replies Count") +
theme_minimal()
# Most reply counts are very low. In a few instances, tweets with a length
# between 40 and 100 characters have reply counts above or around 500.
################################################################################
# Plot top 20 bi-grams
tidy_tweets <- clean_df %>%
unnest_tokens(bigram, tweet, token = "ngrams", n = 2)
# Count the frequency of each bigram
bigram_freq <- tidy_tweets %>%
count(bigram, sort = TRUE)
# Plot top 20 bi-grams
ggplot(head(bigram_freq, 20), aes(x = reorder(bigram, n), y = n, fill = reorder(bigram, n))) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Bi-gram", y = "Frequency", title = "Top 20 Bi-grams") +
scale_fill_viridis_d() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Twitter and "com" are the most frequently occurring terms, followed by "pic" and "twitter."
# All the other terms have much lower frequencies.
#################################################################################
# Plot top N most frequent words
top_n_words <- 20
ggplot(head(word_freq, top_n_words), aes(x = reorder(word, n), y = n)) +
geom_bar(stat = "identity", fill = rainbow(top_n_words), color = "black") +  # Use rainbow color palette
labs(x = "Word", y = "Frequency",
title = paste("Top", top_n_words, "Most Frequent Words")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# The word "twitter" has the highest frequency followed by "com", "pic", and "android".
################################################################################
tidy_tweets <- clean_df %>%
unnest_tokens(bigram, tweet, token = "ngrams", n = 2)
# Count the frequency of each bigram
bigram_freq <- tidy_tweets %>%
count(bigram, sort = TRUE)
# Plot top 20 bi-grams
ggplot(head(bigram_freq, 20), aes(x = reorder(bigram, n), y = n, fill = reorder(bigram, n))) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Bi-gram", y = "Frequency", title = "Top 20 Bi-grams") +
scale_fill_viridis_d() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Twitter and "com" are the most frequently occurring terms, followed by "pic" and "twitter."
# All the other terms have much lower frequencies.
#################################################################################
# Save the plot with custom dimensions
ggsave("D:/MSc Business Analytics/Sem 2/Advanced Data Visualisation/3 Exercise Three/Rplot22.jpeg", plot, width = 10, height = 8, units = "in")  # Adjust width and height as needed
plot <-ggplot(head(bigram_freq, 20), aes(x = reorder(bigram, n), y = n, fill = reorder(bigram, n))) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Bi-gram", y = "Frequency", title = "Top 20 Bi-grams") +
scale_fill_viridis_d() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Twitter and "com" are the most frequently occurring terms, followed by "pic" and "twitter."
# All the other terms have much lower frequencies.
#################################################################################
# Print the plot to the R console
print(plot)
# Save the plot with custom dimensions
ggsave("D:/MSc Business Analytics/Sem 2/Advanced Data Visualisation/3 Exercise Three/Rplot22.jpeg", plot, width = 10, height = 8, units = "in")  # Adjust width and height as needed
# Convert 'date' to Date format
clean_df$date <- as.Date(clean_df$date)
# Tweets by Date
tweets_by_date <- clean_df %>%
group_by(date) %>%
summarise(count = n())
plot <-ggplot(tweets_by_date, aes(x = date, y = count)) +
geom_line() +
labs(title = "Tweets Over Time", x = "Date", y = "Count") +
theme_minimal()
print(plot)
ggsave("D:/MSc Business Analytics/Sem 2/Advanced Data Visualisation/3 Exercise Three/Rplot33.jpeg", plot, width = 10, height = 8, units = "in")  # Adjust width and height as needed
# Calculate word frequency
word_freq <- clean_df %>%
unnest_tokens(word, tweet) %>%
count(word, sort = TRUE)
# Plot top N most frequent words
top_n_words <- 20
plot <- ggplot(head(word_freq, top_n_words), aes(x = reorder(word, n), y = n)) +
geom_bar(stat = "identity", fill = rainbow(top_n_words), color = "black") +  # Use rainbow color palette
labs(x = "Word", y = "Frequency",
title = paste("Top", top_n_words, "Most Frequent Words")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot)
# Calculate word frequency
word_freq <- clean_df %>%
unnest_tokens(word, tweet) %>%
count(word, sort = TRUE)
# Plot top N most frequent words
top_n_words <- 20
plot <- ggplot(head(word_freq, top_n_words), aes(x = reorder(word, n), y = n)) +
geom_bar(stat = "identity", fill = rainbow(top_n_words), color = "black") +  # Use rainbow color palette
labs(x = "Word", y = "Frequency",
title = paste("Top", top_n_words, "Most Frequent Words")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot)
ggsave("D:/MSc Business Analytics/Sem 2/Advanced Data Visualisation/3 Exercise Three/Rplot99.jpeg", plot, width = 10, height = 8, units = "in")  # Adjust width and height as needed
# The word "twitter" has the highest frequency followed by "com", "pic", and "android".
# Load required libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
# Load the data from the Excel file
data_path <- "D:\\MSc Business Analytics\\Sem 2\\Advanced Data Visualisation\\1 Exercise One\\DataSet\\5.xlsx"
data <- read_excel(data_path)
# Prepare data: Assuming the dataset has total, men, and women unemployment for each year
# Calculate the total unemployment and the ratio of men to women
data_summary <- data %>%
filter(Indicator %in% c("MEN", "WOMEN", "UNEMPLOYED (TOTAL)")) %>%
pivot_longer(cols = -c(Indicator, Year), names_to = "AgeGroup", values_to = "Count") %>%
pivot_wider(names_from = Indicator, values_from = Count) %>%
group_by(Year) %>%
summarize(
Total_Unemployed = `UNEMPLOYED (TOTAL)`,
Ratio_Men_to_Women = `MEN` / `WOMEN`,
Gender_Dominance = if_else(`MEN` > `WOMEN`, "More Men", "More Women")
) %>%
ungroup()
# Add color mapping based on the ratio
data_summary$Color <- scales::col_numeric(palette = "RdBu", domain = range(data_summary$Ratio_Men_to_Women))(data_summary$Ratio_Men_to_Women)
# Plotting
plot <- ggplot(data_summary, aes(x = Year, y = Total_Unemployed, color = Color)) +
geom_point(aes(shape = Gender_Dominance, size = 4)) +
scale_shape_manual(values = c("More Men" = 16, "More Women" = 17)) +  # 16 is a square, 17 is a triangle
scale_color_gradientn(colors = RColorBrewer::brewer.pal(11, "RdBu")) +
labs(title = "Comparative Scatterplot of Unemployment in Sibiu (2015-2023)",
subtitle = "Gender Dominance and Ratio of Men to Women Unemployed",
x = "Year",
y = "Total Unemployed",
color = "Ratio of Unemployed Men to Women",
shape = "Gender Dominance") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
# Print the plot
print(plot)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
# Plotting with scale_color_manual
plot <- ggplot(data_summary, aes(x = Year, y = Total_Unemployed, color = Ratio_Men_to_Women)) +
geom_point(aes(shape = Gender_Dominance), size = 4) +
scale_shape_manual(values = c("More Men" = 16, "More Women" = 17)) +
scale_color_manual(values = data_summary$Color) +
labs(title = "Comparative Scatterplot of Unemployment in Sibiu (2015-2023)",
subtitle = "Gender Dominance and Ratio of Men to Women Unemployed",
x = "Year",
y = "Total Unemployed",
color = "Ratio of Unemployed Men to Women",
shape = "Gender Dominance") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
print(plot)
# Plotting with scale_color_manual
plot <- ggplot(data_summary, aes(x = Year, y = Total_Unemployed, color = Ratio_Men_to_Women)) +
geom_point(aes(shape = Gender_Dominance), size = 4) +
scale_shape_manual(values = c("More Men" = 16, "More Women" = 17)) +
scale_color_manual(values = data_summary$Color) +
labs(title = "Comparative Scatterplot of Unemployment in Sibiu (2015-2023)",
subtitle = "Gender Dominance and Ratio of Men to Women Unemployed",
x = "Year",
y = "Total Unemployed",
color = "Ratio of Unemployed Men to Women",
shape = "Gender Dominance") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
print(plot)
library(shiny); runApp('solution.R')
